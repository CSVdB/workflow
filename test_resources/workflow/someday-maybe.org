* To try out
* Projects
 - Automatic 'since' annotations with 'hackage-diff'.
 - A complete rework of the email concept, fixing all its problem.
   A http version of email: basically just a post request?
   First of all: What are the problems? hehe, that's exactly what I was thinking!
 - Google contacts to abook backupper (maybe make my own abook-like thing with a nicer storage format?)
 - Haskell Import orderer, can be opinionated!
 - Template Haskell recompilation side-project
 - AMA on reddit:  - AMA on reddit: I was heavily bullied as a kid and now I've made it as a software developer
 - Try out Nix and/or NIXOS
 - Program to remove redundant imports
 - Language feature catalogue
 - Learn to work with gpg!
 - Learn Type theory:
   https://www.cs.kent.ac.uk/people/staff/sjt/TTFP/ttfp.pdf
 - Buy a really cheap laptop, and make an ultra-secure persona (find some goofy name)
 - http://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/
 - http://www.maths.ed.ac.uk/~aar/papers/maclanecat.pdf
 - http://ocw.mit.edu/courses/mathematics/18-s996-category-theory-for-scientists-spring-2013/textbook/MIT18_S996S13_textbook.pdf
 - http://www.math.mcgill.ca/triples/Barr-Wells-ctcs.pdf
 - program dependency declaration with optional decoupling accross languages
 - https://www.supermemo.com/en/articles/sleep
** An Open Source Project suggestions platform
- a button for 'this would impact my life positively'
- a button for 'i want to work on this'
** SUS charger
A tool that, when run, detects all the config files that you might want to have in a sus depot.
It then also builds that sus depot with spark file.
** Try out x86 a manssembler: Solve euler problem 1 in assembler.
This _is_ a good idea because learning assembler teaches a Csser about the lower level mechanisms.
Don't go all out with it though. Just a few project euler problems is fine. 
** a language within the comments of programming languages
But: why?
It would have to be parsable irrespective of the language so characters will have to be chosen VERY carefully.
this was inspired by what the ghc guys do with their notes
* Programming languages to try out
- Erlang
- Rust
- Coq: a theorem prover
- Idris
- Agda
- Vimscript
   http://learnvimscriptthehardway.stevelosh.com/
* Articles to read
http://research.microsoft.com/pubs/64346/dwork.pdf
https://www.cis.upenn.edu/~aaroth/Papers/privacybook.pdf
* Tech talks to watch:
- Watch this after I know about type theory: https://www.youtube.com/watch?v=7gtSGxJ6Lm8
- Fun with profuctors: https://www.youtube.com/watch?v=OJtGECfksds
* Books to read
** General
 Nutrition books: but first figure out which ones.
** Professional
   - [X] Design patterns - Gamma, Helm, Johnson
   - [X] Refactoring - ??
   - [ ] How to solve it - George Polya
   - [ ] Introduction to algorithms - Cormen, Leiserson, Rivest
   - [ ] Computational geometry - O' Rourke
   - [ ] The art or computer programming - Donald Knuth (started)
   - [ ] The TeXbook - Donald Knuth
   - [ ] Types and Programming Languages by Benjamin Pierce
   - [ ] time management for system administrators
** Personal
    - surely you're joking, mr Feinman
    - [ ] What Got You Here Won't Get You There: How successful people become even more successful 
    - [ ] Non-stop Brian aldis
    + [ ] Zero to one - Peter thiel
    - [X] Crucial Conversations (Patterson, Kelly...)
    - [X] Influence (Cialdini) (ready)
    - [X] The selfish gene
    - [X] 1984 - George Orwell
    - [X] Thinking Fast and Slow (Kahneman)
    - [X] Thinking fast and slow - Daniel Kahneman (ready)
    - [X] The god delusion: (ready)
    - [X] Animal farm - George Orwell (ready)
    - [X] Steve jobs
    - [X] The autobiography of Beljamin franclin
    - [X] Das comunist manifest - Marx
    - [X] Talent is overrated
    - [X] Don't sweat the small stuff
    - [X] GTD
    - [X] Mein Kampf - Hitler
    - [X] The story of abraham linkoln
    - [X] The secret to succes - Eric Thomas
    - [X] How to win friends and influence peopl - Dale Carnegy
    - [X] Think and grow rich
    - [X] The Story of My Life by Helen Keller (ready)
    - [X] GTD fast (ready)
    - [X] The power of habit - Charles Duhigg (ready)
* Projects that I have commited to not-doing because they aren't in line with my goals, have a too low priority, or don't have enough impact.
 - Rosalind
 - Project Euler
 - Over the wire vortex
 - Waterkoker met arduino
 - lichtjes met arduino
 - Learning Closure 
 - Coding games
 - Competitive programming
 - Configure, compile and use a custom linux kernel
 - Create an operating system in a VM
 - Create a filesystem
 - Implement RSA
 - Learn category theory
 - Try out gentoo
 - The Eudyptula Challenge (http://eudyptula-challenge.org/)
 - Crypto challenges: (http://cryptopals.com/)
 - A Connect-4 solver
