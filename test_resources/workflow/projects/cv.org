* Cv and Timeline
The idea is to separate the data from the documents that I want to be able to send.
That's done, now I need to get up to scratch with the new direction.
** DONE Add independent consultant to my CV
   CLOSED: [2017-01-09 Mon 00:26]
** DONE Make a JSON cv repository
   CLOSED: [2017-01-21 Sat 22:04]
make sure I destinguish between english and amererican (maybe auto-generate two different ones).
** CANCELLED try to log into the VKT cv thing. If it doesn't work, just stop trying, I guess.
   CLOSED: [2017-02-13 Mon 19:06]
** DONE make a compact CV from the cv data
   CLOSED: [2017-02-18 Sat 12:20]
** DONE add offers to regular cv
   CLOSED: [2017-02-20 Mon 13:20]
** DONE Decide how I'm going to use the new CV in my website.
   CLOSED: [2017-03-12 Sun 00:06]
I'm thinking I can do most of the heavy lifting in Haskell coding, not using the tool as a command-line tool.
We can download the cv data as part of the build process.
** DONE Rebuild timeline 
   CLOSED: [2017-03-12 Sun 00:06]
** DONE add the rest of the data to the timeline
   CLOSED: [2017-03-12 Sun 02:25]
- Education-related projects (use sub-group of education?)
- Code projects
- Books
- The talks I've done
** DONE complete the 'complete' cv with all the other things I've added to the timelineadded to the timeline.
   CLOSED: [2017-03-12 Sun 18:02]
** DONE add the cv of failures and the complete cv in giovani
   CLOSED: [2017-03-12 Sun 18:02]
** DONE add links to all the cv things on my blog
   CLOSED: [2017-03-12 Sun 18:02]
** NEXT add all the software projects to my csv with flags to not show them.
** TODO Somehow automate the coding projects using the github API
I'd like to rebuild timeline in a better way than the current LaTeX-based, very manual setup:

Automated looking at repositories:
- Github API 
- Bitbucket API (prob not necessary because they're mostly private)

Then we can recognize books via LaTeX 

This is low-priority though it should be done by june next year.


Maybe I could use the diagrams library.


You might want to use this graphql version:

{
  viewer {
    name
    ... on User {
      repository(name: "super-user-spark") {
        ref(qualifiedName: "master") {
          target {
            ... on Commit {
              id
              history(first: 5) {
                edges {
                  node {
                    message
                    author {
                      date
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
